plugins {
	id 'fabric-loom' version '0.10-SNAPSHOT'
	id 'maven-publish'
	id 'com.github.johnrengelman.shadow' version '7.1.0' //https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow
}

sourceCompatibility = JavaVersion.VERSION_17.0.1+12
targetCompatibility = JavaVersion.VERSION_17.0.1+12

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven {
        name = 'nukkitx-repo-release'
        url = 'https://repo.nukkitx.com/maven-releases/'
    }
    maven {
        name = 'nukkitx-repo-snapshot'
        url = 'https://repo.nukkitx.com/maven-snapshots/'
    }
}

dependencies {
	minecraft "com.mojang:minecraft:1.17.1"
    	mappings "net.fabricmc:yarn:1.17.1+build.64:v2"
    	modImplementation "net.fabricmc:fabric-loader:0.12.5"
            
    	//Fabric api
    	modImplementation "net.fabricmc.fabric-api:fabric-api:0.42.1+1.17"
	
	//compile group: 'com.nukkitx.protocol', name: 'bedrock-v471', version: '2.9.3-SNAPSHOT'
	compile("com.nukkitx.protocol:bedrock-v471:2.9.3-SNAPSHOT") {
		exclude group: 'com.nukkitx.fastutil'
		exclude group: 'io.netty'
	}
	shadow ('com.nukkitx.protocol:bedrock-v471:2.9.3-SNAPSHOT') {
		exclude group: 'com.nukkitx.fastutil'
		exclude group: 'io.netty'
	}
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

shadowJar {
	configurations = [project.configurations.shadow]
	classifier = "shadow"
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}

remapJar {
	dependsOn(shadowJar)
	input.set shadowJar.archiveFile.get()
}
